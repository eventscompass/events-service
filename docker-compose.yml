version: "3"

services:

  events-service:
    container_name: events-service
    build: .
    environment:
      - HTTP_SERVER_LISTEN=:8080
      - MONGO_DB_HOST=mongodb
      - MONGO_DB_PORT=27017
      - MONGO_DB_USERNAME=eventsservice
      - MONGO_DB_PASSWORD=mongo_password
      - MONGO_DB_DATABASE=events
      - RABBIT_MQ_HOST=rabbitmq
      - RABBIT_MQ_PORT=5672
      - RABBIT_MQ_USERNAME=eventsservice
      - RABBIT_MQ_PASSWORD=rabbitmq_password
    ports:
      - "8080:8080"
    expose:
      - 8080
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    # Note that healthcheck will not work because this particular docker image
    # is built from scratch and does not have curl installed.
    # healthcheck:
    #   test: curl -f http://localhost:8080/healthz || exit 1

  mongodb:
    container_name: mongodb
    image: mongo:4.4.4
    expose:
      - 27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=eventsservice
      - MONGO_INITDB_ROOT_PASSWORD=mongo_password
      - MONGO_INITDB_DATABASE=events
    # volumes:
    #   - ./db-data/mogno:/data/db

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.12.7-alpine
    expose:
      - 5672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - RABBITMQ_DEFAULT_USER=eventsservice
      - RABBITMQ_DEFAULT_PASS=rabbitmq_password
    # volumes:
    #   -

  integration_tests:
    container_name: integration_tests
    image: golang:1.21.2-alpine
    # When running integration tests with CircleCI we need to first run
    # docker-compose, then copy the src code inside this container, and only
    # after that run the tests. Thus, the container will simply sleep.
    # command: go test ./src/... # for local tests uncomment this line
    command: sleep infinity
    working_dir: '/usr/service'
    depends_on:
      events-service-ready: # note we are using another service for healthchecks
        condition: service_healthy
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    volumes:
      - '.:/usr/service'

  # This service is used as a workaround for health checking.
  events-service-ready:
    container_name: events-service-ready
    image: alpine/curl:8.1.2
    command: sleep infinity
    healthcheck:
      test: curl -f events-service:8080/healthz || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
